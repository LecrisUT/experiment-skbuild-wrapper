on:
  push:
    branches: [ "main" ]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  manual:
    runs-on: ${{ matrix.runs-on }}
    container: ${{ matrix.runs-on == 'ubuntu-latest' && 'quay.io/pypa/manylinux2014_x86_64' || '' }}
    strategy:
      matrix:
        runs-on: [ ubuntu-latest, macos-latest, windows-latest ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - uses: lukka/get-cmake@latest
      - run: |
          echo "::group::pip install"
          pip install auditwheel
          echo "::endgroup::"
          echo "::group::pip wheel"
          pip wheel --wheel-dir wheelhouse/ ./base ./my_pkg
          echo "::endgroup::"
          echo "::group::pip install wheels"
          pip install --no-index --find-links file:wheelhouse my_pkg_base my_pkg
          echo "::endgroup::"
          echo "::group::auditwheel"
          export platlib=$(python3 -c 'import sysconfig; print(sysconfig.get_path("platlib"))')
          export LD_LIBRARY_PATH=$(echo $platlib/base/lib*):$LD_LIBRARY_PATH
          auditwheel repair -w new_wheelhouse wheelhouse/*
          echo "::endgroup::"
        if: ${{ matrix.runs-on == 'ubuntu-latest' }}
      - run: |
          echo "::group::pip install"
          pip install delocate
          echo "::endgroup::"
          echo "::group::pip wheel"
          pip wheel --wheel-dir wheelhouse/ ./base ./my_pkg
          echo "::endgroup::"
          echo "::group::pip install wheels"
          pip install --no-index --find-links file:wheelhouse my_pkg_base my_pkg
          echo "::endgroup::"
          echo "::group::auditwheel"
          export platlib=$(python3 -c 'import sysconfig; print(sysconfig.get_path("platlib"))')
          echo $platlib
          export DYLD_LIBRARY_PATH=$(echo $platlib/base/lib*):$DYLD_LIBRARY_PATH
          echo $DYLD_LIBRARY_PATH
          delocate-wheel -w new_wheelhouse -v wheelhouse/*
          echo "::endgroup::"
        if: ${{ matrix.runs-on == 'macos-latest' }}
      - run: |
          echo "::group::pip install"
          pip install delvewheel
          echo "::endgroup::"
          echo "::group::pip wheel"
          pip wheel --wheel-dir wheelhouse/ ./base ./my_pkg
          echo "::endgroup::"
          echo "::group::pip install wheels"
          pip install --no-index --find-links file:wheelhouse my_pkg_base my_pkg
          echo "::endgroup::"
          echo "::group::auditwheel"
          $platlib = (python3 -c 'import sysconfig; print(sysconfig.get_path("platlib"))')
          $env:Path += ";$platlib\base\bin"
          ls $platlib\base\bin
          delvewheel repair -w new_wheelhouse wheelhouse\*
          echo "::endgroup::"
        if: ${{ matrix.runs-on == 'windows-latest' }}
      - run: |
          pip uninstall my_pkg my_pkg_base
          pip install --no-index --find-links file:new_wheelhouse my_pkg_base my_pkg
      - run: main
        if: always()
      - run: python3 -c "from my_pkg._run_mod import run_main; run_main()"
        if: always()


  cibuildwheel:
    runs-on: ${{ matrix.runs-on }}
    strategy:
      matrix:
        runs-on: [ ubuntu-latest, macos-latest, windows-latest ]
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
      - uses: lukka/get-cmake@latest
      - uses: pypa/cibuildwheel@v2.23
        with:
          package-dir: base
      - uses: pypa/cibuildwheel@v2.23
        with:
          package-dir: my_pkg
      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.runs-on }}
          path: ./wheelhouse/*.whl
